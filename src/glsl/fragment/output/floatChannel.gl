// Renders the channel of a float texture into an unsigned byte RGBA color

uniform sampler2D uun_source;
uniform vec4 uun_channel;

varying vec2 vUV;

// see http://stackoverflow.com/questions/17981163/webgl-read-pixels-from-floating-point-render-target

float shift_right (float v, float amt) { 
  v = floor(v) + 0.5; 
  return floor(v / exp2(amt)); 
}
float shift_left (float v, float amt) { 
  return floor(v * exp2(amt) + 0.5); 
}
float mask_last (float v, float bits) { 
  return mod(v, shift_left(1.0, bits)); 
}
float extract_bits (float num, float from, float to) { 
  from = floor(from + 0.5); to = floor(to + 0.5); 
  return mask_last(shift_right(num, from), to - from); 
}

vec4 encode_float (float val) { 
  if (val == 0.0) return vec4(0.0, 0.0, 0.0, 0.0); 
  //float sign = val > 0.0 ? 0.0 : 1.0; 
  float sign128 = 128.0 * step(val, 0.0);
  val = abs(val); 
  float exponent = floor(log2(val)); 
  float biased_exponent = exponent + 127.0; 
  float fraction = ((val / exp2(exponent)) - 1.0) * 8388608.0; 
  float t = biased_exponent / 2.0; 
  float last_bit_of_biased_exponent = fract(t) * 2.0; 
  float remaining_bits_of_biased_exponent = floor(t); 
  float byte4 = extract_bits(fraction, 0.0, 8.0); 
  float byte3 = extract_bits(fraction, 8.0, 16.0); 
  float byte2 = (last_bit_of_biased_exponent * 128.0 + extract_bits(fraction, 16.0, 23.0)); 
  float byte1 = (sign128 + remaining_bits_of_biased_exponent); 
  return vec4(byte4, byte3, byte2, byte1) / 255.0; 
}

/*bool isNan(float val)
{
  return ( val < 0.0 || 0.0 < val || val == 0.0 ) ? false : true;
}*/

void main(void) {
  float a = dot(texture2D(uun_source, vUV), uun_channel);
  gl_FragColor = encode_float(a);

  // DEBUG ZONE:
  //gl_FragColor = isNan(a) ? encode_float(0.) : encode_float(a);
  //gl_FragColor += vec4(1., 0., 1., 1.);
} 
 
