varying vec2 vUV;
uniform sampler2D uun_source, uun_mask;
uniform float uun_ds;

const vec4 ONE4 = vec4(1.);

void main(void) {

  vec4 horizEdge = vec4( 0.0 );
  horizEdge -= texture2D( uun_source, vec2( vUV.x -uun_ds, vUV.y -uun_ds ) ) * 1.0;
  horizEdge -= texture2D( uun_source, vec2( vUV.x -uun_ds, vUV.y     ) ) * 2.0;
  horizEdge -= texture2D( uun_source, vec2( vUV.x -uun_ds, vUV.y +uun_ds ) ) * 1.0;
  horizEdge += texture2D( uun_source, vec2( vUV.x +uun_ds, vUV.y -uun_ds ) ) * 1.0;
  horizEdge += texture2D( uun_source, vec2( vUV.x +uun_ds, vUV.y     ) ) * 2.0;
  horizEdge += texture2D( uun_source, vec2( vUV.x +uun_ds, vUV.y +uun_ds ) ) * 1.0;
  vec4 vertEdge = vec4( 0.0 );
  vertEdge -= texture2D( uun_source, vec2( vUV.x -uun_ds, vUV.y -uun_ds ) ) * 1.0;
  vertEdge -= texture2D( uun_source, vec2( vUV.x    , vUV.y -uun_ds ) ) * 2.0;
  vertEdge -= texture2D( uun_source, vec2( vUV.x +uun_ds, vUV.y -uun_ds ) ) * 1.0;
  vertEdge += texture2D( uun_source, vec2( vUV.x -uun_ds, vUV.y +uun_ds ) ) * 1.0;
  vertEdge += texture2D( uun_source, vec2( vUV.x    , vUV.y +uun_ds ) ) * 2.0;
  vertEdge += texture2D( uun_source, vec2( vUV.x +uun_ds, vUV.y +uun_ds ) ) * 1.0;
  vec3 edge = sqrt((horizEdge.rgb * horizEdge.rgb) + (vertEdge.rgb * vertEdge.rgb));

  vec4 color = vec4( edge, texture2D( uun_source, vUV ).a );

  vec4 maskColor = texture2D(uun_mask, vUV);
  gl_FragColor = maskColor.a * color.r * ONE4;
}  
 
