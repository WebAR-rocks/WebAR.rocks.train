uniform sampler2D uun_weights, uun_deltas;
uniform float uun_toSize, uun_fromSize, uun_stride;

varying vec2 vUV;


const vec2 ZERO2 = vec2(0.,0.);
const vec2 ONE2 = vec2(1.,1.);
const vec2 HALF2 = vec2(0.5,0.5);

const float SPARSITY = 1.1111; // will be replaced

// vUV is along fromLayer neurons
// weights grouped by toLayer neurons
// deltas grouped by toLayer neurons
// output should have the shape of fromLayer

void main(void) {

  vec4 sum = vec4(0.,0.,0.,0.);

  vec2 uvTo, uvWeight, xyPatchTo, xyTo;
  vec2 xyPatch = ZERO2;
  vec2 xyShrink = ZERO2;

  float fromSparsity = SPARSITY;
  float shrinkFactor = uun_fromSize / uun_toSize;


  vec2 eps2 = ONE2 * 0.01 / uun_toSize;
  vec2 xyFrom = floor(vUV*uun_fromSize+eps2);
  vec2 xyTo0 = floor(vUV*uun_toSize + eps2);
  
  float weightSize = fromSparsity * uun_fromSize;
  float toSparsity = weightSize / uun_toSize;

  vec2 halfFromSparsity = ONE2 * (fromSparsity-1.0) / 2.0;
  
  xyShrink = mod(xyFrom + eps2, shrinkFactor * ONE2);
             

  for (float patch_x=0.0; patch_x<SPARSITY-0.0001; patch_x+=1.0){
    xyPatch.x = patch_x;
    
    for (float patch_y=0.0; patch_y<SPARSITY-0.0001; patch_y+=1.0){
      xyPatch.y = patch_y;

      // in FF shader, we have: xyFrom = xyTo+uun_stride*(xyPatch-halfToSparsity), so:
      // xyTo = xyFrom-uun_stride*(xyPatch-halfFromSparsity);
      // uvTo = xyTo/uun_toSize;

      xyTo = xyTo0 - uun_stride * (xyPatch - halfFromSparsity);

      uvTo = xyTo / uun_toSize;
      uvTo += step(uvTo, -eps2); // if negative, add 1
      uvTo -= step(ONE2 - eps2, uvTo); //if >1, substract 1

      xyPatchTo = xyPatch * shrinkFactor + xyShrink;
      uvWeight = (xyTo * toSparsity + xyPatchTo + HALF2) / weightSize;

      sum += texture2D(uun_weights, uvWeight)*texture2D(uun_deltas, uvTo);
    }
  }

  gl_FragColor = sum / (fromSparsity * fromSparsity);

  // DEBUG ZONE:
  //gl_FragColor=vec4(uvWeight, uvTo);
  //gl_FragColor=vec4(uun_toSize, sparsity, 0.5,1.);
  //gl_FragColor=vec4(1.,0.,1.,1.);
    
} 
 
 
