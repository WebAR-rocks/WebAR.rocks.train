uniform sampler2D uun_weights, uun_deltas;
uniform float uun_fromSize;

varying vec2 vUV;


const vec2 ZERO2 = vec2(0.,0.);
const vec2 ONE2 = vec2(1.,1.);
const vec2 HALF2 = vec2(0.5,0.5);

const float SPARSITY = 1.1111; // will be replaced

// vUV is along fromLayer neurons
// weights grouped by toLayer neurons
// deltas grouped by toLayer neurons
// output should have the shape of fromLayer

void main(void) {

  vec4 sum = vec4(0.,0.,0.,0.);

  vec2 uvTo, uvWeight;
  vec2 xyPatch = ZERO2;
  float toSize = SPARSITY;

  vec2 eps2 = ONE2 * 0.01 / uun_fromSize;
  vec2 xyFrom = floor(vUV * uun_fromSize + eps2);
  
  float weightSize = toSize * uun_fromSize;
  
  vec2 xyTo = ZERO2;
  for (float to_x=0.0; to_x<SPARSITY-0.0001; to_x+=1.0){ // sparsity is toSize
    xyTo.x = to_x;
    for (float to_y=0.0; to_y<SPARSITY-0.0001; to_y+=1.0){
      xyTo.y = to_y;
      vec2 uvTo = (xyTo + HALF2) / toSize;      

      vec2 xyWeight = xyTo * uun_fromSize + xyFrom;
      vec2 uvWeight = (xyWeight + HALF2) / weightSize;

      sum += texture2D(uun_weights, uvWeight) * texture2D(uun_deltas, uvTo);
    }
  }

  gl_FragColor = sum / (toSize * toSize);

  // DEBUG ZONE:
  //gl_FragColor = vec4(uvWeight, uvTo);
  //gl_FragColor = vec4(uun_toSize, sparsity, 0.5,1.);
  //gl_FragColor = vec4(1.,0.,1.,1.);
} 
 
 
