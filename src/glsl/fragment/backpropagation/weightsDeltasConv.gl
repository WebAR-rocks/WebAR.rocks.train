// compute weights*delta to transmit to the previous layer (backprop)
// the output will be summed using mipmaps

// deltas are grouped according to toLayer
// the output should be grouped according to from layer

uniform sampler2D uun_weights, uun_deltas;
uniform float uun_toSize, uun_fromSize, uun_toSparsity, uun_kernelsCount, uun_isDebug, uun_isDebug2;

varying vec2 vUV;

const vec2 ONE2 = vec2(1.,1.);
const vec2 ZERO2 = vec2(0., 0.);


void main(void) {
  float conSize = uun_toSize * uun_toSparsity;
  float fromSparsity = conSize / uun_fromSize;
  float stride = floor(uun_kernelsCount*uun_fromSize / uun_toSize); // in from pixels
  float fromKernelClusterSize = fromSparsity / uun_kernelsCount;
  float toKernelClusterCount = uun_toSize / uun_kernelsCount;
  //float toPatchSize = fromSparsity / uun_kernelsCount;
  float weightSize = uun_kernelsCount * uun_toSparsity;

  vec2 uv = ONE2 - vUV;
  vec2 conCo = floor(uv * conSize);

  // make sure there is no rounding or interpolation error on UV:
  vec2 uvFromInv = (0.5 + conCo) / conSize;
  
  vec2 fromNeuronCo = floor(conCo / fromSparsity); // bcoz output is organized according to fromLayer
  vec2 inFromNeuronCo = floor(conCo - fromNeuronCo * fromSparsity);
  vec2 inFromNeuronUv = (inFromNeuronCo + 0.5) / fromSparsity;
  
  vec2 fromKernelCo = floor(uun_kernelsCount*inFromNeuronUv); // in which kernel we are
  vec2 inFromKernelCo = inFromNeuronCo - fromKernelCo * fromKernelClusterSize;
  
  // neurons of the to layer linked to this neuron
  // has a shape of 1 dense rectangle per kernel element
  // with a width of fromSparsity/kernelsCount pixels
  // and an offset of floor(fromNeuronCo/stride) pixels
  vec2 stridesCount = floor(fromNeuronCo / stride); // in strides on the from layer, in pixels on the to layer
  // empirical value, solved 2021-12-07:
  float offsetCo = 1.0 - 0.5 * uun_fromSize * uun_kernelsCount / uun_toSize;
  vec2 fromStartOffsetCo = floor(offsetCo + fromNeuronCo  - stridesCount * stride); // 0 at the beginning of the stride, then increment
  //fromStartOffsetCo = mod(fromStartOffsetCo, stride);
  //gl_FragColor = vec4(fromStartOffsetCo.x, floor(-0.5 + fromNeuronCo  - stridesCount * stride).x, -1., -1.); return;

  vec2 toOffsetCo = floor(fromNeuronCo / stride);
  
  // position of toNeuron in pixels, in the to kernel - should be between 0 and toKernelClusterCount-1:
  vec2 toPatchCo = floor(toOffsetCo + inFromKernelCo);

  // coordinates of the TO layer neuron:
  vec2 toCo = uun_toSize - 1.0 - (toPatchCo + fromKernelCo * toKernelClusterCount);
  toCo = mix(toCo, mod(toCo, ONE2*uun_toSize), uun_isDebug2);
  vec2 toUv = (0.5 + toCo) / uun_toSize;
  
  // 1 of to connection is inside, 0 if outside:
  vec2 isInside = step(toUv, ONE2) * step(ZERO2, toUv);
  
  //vec2 patchCo = stride * (inFromKernelCo + 0.5) - fromStartOffsetCo;
  vec2 patchCo = stride * (inFromKernelCo + 0.5) - fromStartOffsetCo;
  vec2 kernelCo = floor((toCo + 0.5) * uun_kernelsCount / uun_toSize);
  vec2 weightCo = kernelCo * uun_toSparsity + patchCo;
  vec2 weightUv = (weightCo + 0.5) / weightSize;

  // fetch textures values:
  vec4 weight = texture2D(uun_weights, weightUv);
  vec4 delta = texture2D(uun_deltas, toUv);

  vec4 outpt = weight * delta;
  outpt *= isInside.x * isInside.y;

  // debug modes:
  outpt = mix(outpt, vec4(weight.rg, mod(toUv, ONE2)), uun_isDebug);
  //outpt = mix(outpt, vec4(weightUv, toUv), uun_isDebug2);
  outpt = mix(outpt, vec4(weightUv, mix(vec2(-1.0), toUv, isInside.x*isInside.y)), uun_isDebug2);

  gl_FragColor = outpt; 

  // DEBUG ZONE:
  //gl_FragColor = vec4(weightUv, toUv);
  //gl_FragColor = vec4(toPatchCo, toPatchCo2);
  //gl_FragColor = vec4(inFromNeuronUv, uvKernelCluster); //OK, 32 de cot√©, 4 par neurone from
  //gl_FragColor = vec4(abs(toKernelCo-kernelCo), 0.,1.); //TEST OK

  // FOR CONNECTIVITYCONVDEBUG:
  //vec4 wi = weight * delta;
  //gl_FragColor = vec4(weight.rg, toUv);
} 
 
 
