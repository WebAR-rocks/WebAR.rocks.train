uniform sampler2D uun_outputs;
uniform vec2 uun_sizePx;

varying vec2 vUV;

// take the max signal on a 4 pixels patch
// executed as a reduction (2X)

/*vec4 maxAbs(vec4 output0, vec4 output1){
  vec4 isOutput0Inf1 = step(output0, output1); // 0 or 1 (output 1 bigger)
  return mix(output0, output1, isOutput0Inf1);
}*/

const vec2 ONE2 = vec2(1.0);
const vec2 HALF2 = vec2(0.5);
const vec2 SELECTX2 = vec2(1., 0.);
const vec2 SELECTY2 = vec2(0., 1.);


void main(void) {
  vec2 dxy = ONE2 / uun_sizePx;
  vec2 toSizePx = uun_sizePx / 2.0;
  
  // vUV are UVs of the reduced (to) layer
  // So it matches the middle of the 2*2 texels patch of the full size layer
  // we set it as the middle of the top left texel of the full size layer:
  // assuming vUV are set correctly, in the texel center:
  //vec2 uv = vUV - dxy*HALF2;

  // works also with dirty vUV:
  vec2 uvToPx = floor(vUV * toSizePx) + HALF2;
  vec2 uvTo = uvToPx / toSizePx; // middle of the 2*2 texels patch
  vec2 uvFrom = uvTo - ( dxy * 0.5 );

  vec4 output0 = texture2D(uun_outputs, uvFrom);
  vec4 output1 = texture2D(uun_outputs, uvFrom + dxy*SELECTX2);
  vec4 output2 = texture2D(uun_outputs, uvFrom + dxy*SELECTY2);
  vec4 output3 = texture2D(uun_outputs, uvFrom + dxy);

  vec4 max01 = max(output0, output1);
  vec4 max23 = max(output2, output3);
  
  gl_FragColor = max(max01, max23);

  // DEBUG ZONE:
  //gl_FragColor = output3;
  //gl_FragColor = vec4(0.,0.,0.,0.);
  
  //float prout = (gl_FragCoord.x/10.)-floor(gl_FragCoord.x/10.);
  //gl_FragColor = vec4(prout, 0.,0.,1.);
} 