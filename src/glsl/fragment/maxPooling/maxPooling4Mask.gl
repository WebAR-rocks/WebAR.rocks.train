uniform sampler2D uun_outputs;
uniform vec2 uun_sizePx;

varying vec2 vUV;

const vec2 ONE2 = vec2(1.);
const float EPS = 0.000001; // epsilon


vec4 max4(vec4 val0, vec4 val1, vec4 val2, vec4 val3){
  vec4 maxVal01 = max(val0, val1);
  vec4 maxVal23 = max(val2, val3);
  return max(maxVal01, maxVal23);
}


// take the max signal value
// on a 4 pixels patch
// not executed as a reduction (1/4 of pixels should be white, other black)
void main(void) {
  // uv distance between 2 pixels in from (full size) texture:
  vec2 dxy = ONE2 / uun_sizePx;
  vec2 toSizePx = uun_sizePx / 4.0;

  vec2 uvFromCornerPx = 4. * floor(vUV*toSizePx);
  vec2 uvFromCorner = (uvFromCornerPx / uun_sizePx) + (dxy * 0.5);

  // uv of pixels on the patch:
  vec2 uv00 = uvFromCorner;
  vec2 uv01 = uv00 + dxy*vec2(1.,0.);
  vec2 uv02 = uv00 + dxy*vec2(1.,1.);
  vec2 uv03 = uv00 + dxy*vec2(0.,1.);

  vec2 uv10 = uvFromCorner + dxy * vec2(2.,0.);
  vec2 uv11 = uv10 + dxy*vec2(1.,0.);
  vec2 uv12 = uv10 + dxy*vec2(1.,1.);
  vec2 uv13 = uv10 + dxy*vec2(0.,1.);

  vec2 uv20 = uvFromCorner + dxy * vec2(2.,2.);
  vec2 uv21 = uv20 + dxy*vec2(1.,0.);
  vec2 uv22 = uv20 + dxy*vec2(1.,1.);
  vec2 uv23 = uv20 + dxy*vec2(0.,1.);

  vec2 uv30 = uvFromCorner + dxy * vec2(0.,2.);
  vec2 uv31 = uv30 + dxy*vec2(1.,0.);
  vec2 uv32 = uv30 + dxy*vec2(1.,1.);
  vec2 uv33 = uv30 + dxy*vec2(0.,1.);

  // test what pixel we are currently drawing:
  float is00 = step(distance(uv00, vUV), EPS);
  float is01 = step(distance(uv01, vUV), EPS);
  float is02 = step(distance(uv02, vUV), EPS);
  float is03 = step(distance(uv03, vUV), EPS);

  float is10 = step(distance(uv10, vUV), EPS);
  float is11 = step(distance(uv11, vUV), EPS);
  float is12 = step(distance(uv12, vUV), EPS);
  float is13 = step(distance(uv13, vUV), EPS);

  float is20 = step(distance(uv20, vUV), EPS);
  float is21 = step(distance(uv21, vUV), EPS);
  float is22 = step(distance(uv22, vUV), EPS);
  float is23 = step(distance(uv23, vUV), EPS);

  float is30 = step(distance(uv30, vUV), EPS);
  float is31 = step(distance(uv31, vUV), EPS);
  float is32 = step(distance(uv32, vUV), EPS);
  float is33 = step(distance(uv33, vUV), EPS);

  // read vals:
  vec4 val00 = texture2D(uun_outputs, uv00);
  vec4 val01 = texture2D(uun_outputs, uv01);
  vec4 val02 = texture2D(uun_outputs, uv02);
  vec4 val03 = texture2D(uun_outputs, uv03);

  vec4 val10 = texture2D(uun_outputs, uv10);
  vec4 val11 = texture2D(uun_outputs, uv11);
  vec4 val12 = texture2D(uun_outputs, uv12);
  vec4 val13 = texture2D(uun_outputs, uv13);

  vec4 val20 = texture2D(uun_outputs, uv20);
  vec4 val21 = texture2D(uun_outputs, uv21);
  vec4 val22 = texture2D(uun_outputs, uv22);
  vec4 val23 = texture2D(uun_outputs, uv23);

  vec4 val30 = texture2D(uun_outputs, uv30);
  vec4 val31 = texture2D(uun_outputs, uv31);
  vec4 val32 = texture2D(uun_outputs, uv32);
  vec4 val33 = texture2D(uun_outputs, uv33);

  vec4 thisVal = is00*val00 + is01*val01 + is02*val02 + is03*val03
               + is10*val10 + is11*val11 + is12*val12 + is13*val13
               + is20*val20 + is21*val21 + is22*val22 + is23*val23
               + is30*val30 + is31*val31 + is32*val32 + is33*val33;
                             
  vec4 maxValPatch0 = max4(val00, val01, val02, val03);
  vec4 maxValPatch1 = max4(val10, val11, val12, val13);
  vec4 maxValPatch2 = max4(val20, val21, val22, val23);
  vec4 maxValPatch3 = max4(val30, val31, val32, val33);
  
  vec4 maxVal = max4(maxValPatch0, maxValPatch1, maxValPatch2, maxValPatch3);
  gl_FragColor = step(maxVal, thisVal);
} 