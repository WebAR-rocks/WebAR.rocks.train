uniform sampler2D uun_outputs;
uniform vec2 uun_sizePx;

varying vec2 vUV;

const vec2 ONE2 = vec2(1.);
const vec2 SELECTX12 = vec2(1.,0.);
const vec2 SELECTY12 = vec2(0.,1.);
const vec2 SELECTX22 = vec2(2.,0.);
const vec2 SELECTY22 = vec2(0.,2.);


//take the max signal in abs value
//on a 4 pixels patch

/*vec4 maxAbs(vec4 output0, vec4 output1){
  vec4 isOutput0Inf1 = step(output0, output1); //0 or 1(absOutput 1 bigger)
  return mix(output0, output1, isOutput0Inf1);
}*/

vec4 max4(vec2 dxy, vec2 uvCorner){
  vec4 output0 = texture2D(uun_outputs, uvCorner);
  vec4 output1 = texture2D(uun_outputs, uvCorner + dxy*SELECTX12);
  vec4 output2 = texture2D(uun_outputs, uvCorner + dxy*SELECTY12);
  vec4 output3 = texture2D(uun_outputs, uvCorner + dxy);

  vec4 max01 = max(output0, output1);
  vec4 max23 = max(output2, output3);
  return max(max01, max23);
}

void main(void) {
  // compute the corner UV:
  vec2 dxy = ONE2 / uun_sizePx;
  vec2 toSizePx = uun_sizePx / 4.0;

  vec2 uvFromCornerPx = 4. * floor(vUV*toSizePx);
  vec2 uvFromCorner = uvFromCornerPx / uun_sizePx;

  // vUV are UVs of the reduced layer
  // So it matches the middle of the 4*4 texels patch of the full size layer
  // we set it as the middle of the top left texel of the full size layer:
  vec2 uv = uvFromCorner + dxy * 0.5;

  // compute maximums on 2*2 texels patches:
  vec4 maxPatch0 = max4(dxy, uv);
  vec4 maxPatch1 = max4(dxy, uv+dxy*SELECTX22);
  vec4 maxPatch2 = max4(dxy, uv+dxy*2.);
  vec4 maxPatch3 = max4(dxy, uv+dxy*SELECTY22);

  vec4 maxPatch01 = max(maxPatch0, maxPatch1);
  vec4 maxPatch23 = max(maxPatch2, maxPatch3);

  gl_FragColor = max(maxPatch01, maxPatch23);
} 