// APPLY WEIGHTS (FEEDFORWARD)
// USED IN EXPLOITATION ONLY

uniform sampler2D uun_weights, uun_inputs, uun_bias;
uniform float uun_toSize, uun_stride, uun_floatMax;

varying vec2 vUV;

// vUV is along toLayer neurons
// weights grouped by toLayer neurons
// inputs grouped by fromLayer neurons
// output grouped by toLayer neurons

const vec4 ONE4 = vec4(1.,1.,1.,1.);
const vec2 ZERO2 = vec2(0.,0.);
const vec2 ONE2 = vec2(1.,1.);
const vec2 HALF2 = vec2(0.5,0.5);
const vec2 EPS2 = vec2(0.01,0.01);

const float SPARSITY = 1.1111; // will be replaced

void main(void) {
  vec4 sum = texture2D(uun_bias, vUV);

  vec2 uvFrom,uvWeight, xyFrom;
  vec2 xyPatch = ZERO2;
  float toSparsity = SPARSITY;
  
  vec2 eps2 = EPS2 / uun_toSize;
  vec2 xyTo = floor(vUV*uun_toSize + eps2);
  float weightSize = toSparsity * uun_toSize;
  vec2 halfFromSparsity = ONE2*(toSparsity-1.0)/2.0;


  for (float patch_x=0.0; patch_x<SPARSITY-0.0001; patch_x+=1.0){
    xyPatch.x = patch_x;

    for (float patch_y=0.0; patch_y<SPARSITY-0.0001; patch_y+=1.0){
      xyPatch.y = patch_y;

      xyFrom = xyTo + uun_stride * (xyPatch-halfFromSparsity);
      uvFrom = xyFrom / uun_toSize;
      uvFrom += step(uvFrom, -eps2); // if negative, add 1
      uvFrom -= step(ONE2-eps2, uvFrom); // if >1, substract 1

      uvWeight = (xyTo * toSparsity + xyPatch + HALF2) / weightSize;

      sum += texture2D(uun_weights, uvWeight) * texture2D(uun_inputs, uvFrom);
    } //end loop on patch_y
  } //end loop on patch_x
  

  gl_FragColor = clamp(sum, -uun_floatMax*ONE4, uun_floatMax*ONE4);

  // DEBUG ZONE:
  //gl_FragColor=texture2D(uun_inputs, uvFrom);
  //gl_FragColor=texture2D(uun_weights, uvFrom);
} 
 
