// APPLY WEIGHTS (FEEDFORWARD)
// USED IN EXPLOITATION ONLY
uniform float uun_toSize, uun_stride, uun_fromSize, uun_floatMax;
uniform sampler2D uun_weights, uun_inputs, uun_bias;

varying vec2 vUV;

// vUV is along toLayer neurons
// weights grouped by toLayer neurons
// inputs grouped by fromLayer neurons
// output grouped by toLayer neurons

const vec4 ONE4 = vec4(1.,1.,1.,1.);
const vec2 ZERO2 = vec2(0.,0.);
const vec2 ONE2 = vec2(1.,1.);
const vec2 HALF2 = vec2(0.5,0.5);
const vec2 EPS2 = vec2(0.01,0.01);

const float SPARSITY = 1.1111; // will be replaced
const float SHRINKFACTOR = 2.2222; // will be replaced


void main(void) {
  //vec2 uvFrom = fract(vUV*uun_toSize);

  //vec4 we = texture2D(uun_weights, vUV);   //weight
  //vec4 from = texture2D(uun_inputs, uvFrom);  //input signal

  //gl_FragColor = we*from;

  vec4 sum = texture2D(uun_bias, vUV);


  vec2 uvFrom,uvWeight, xyFrom, xyPatchTo;
  vec2 xyPatch = ZERO2;
  vec2 xyShrink = ZERO2;

  float fromSparsity = SPARSITY;
  float shrinkFactor = SHRINKFACTOR;
  

  vec2 eps2 = EPS2/uun_fromSize;
  vec2 xyTo = floor(vUV*uun_toSize+eps2);
  float weightSize = fromSparsity*uun_fromSize;

  vec2 halfFromSparsity = ONE2*(fromSparsity-1.0)/2.0;

  float toSparsity = weightSize/uun_toSize;
  

  vec2 xyFrom0 = xyTo*shrinkFactor;


  for (float patch_x = 0.0; patch_x<SPARSITY-0.0001; patch_x +=  1.0){
    xyPatch.x = patch_x;

    for (float patch_y = 0.0; patch_y<SPARSITY-0.0001; patch_y +=  1.0){
      xyPatch.y = patch_y;


      for (float shrink_x = 0.0; shrink_x<SHRINKFACTOR-0.0001; shrink_x +=  1.0){
        xyShrink.x = shrink_x;

        for (float shrink_y = 0.0; shrink_y<SHRINKFACTOR-0.0001; shrink_y +=  1.0){
          xyShrink.y = shrink_y;

          
          xyFrom = (xyFrom0+xyShrink+shrinkFactor*uun_stride*(xyPatch-halfFromSparsity)); 
          
          uvFrom = (xyFrom+HALF2)/uun_fromSize;
          uvFrom +=  step(uvFrom, -eps2); // if negative, add 1
          uvFrom -= step(ONE2-eps2, uvFrom); // if >1, substract 1

          xyPatchTo = xyPatch*shrinkFactor + xyShrink;

          uvWeight = (xyTo*toSparsity+xyPatchTo+HALF2)/weightSize;
          sum +=  texture2D(uun_weights, uvWeight)*texture2D(uun_inputs, uvFrom);

        } //end loop on shrink_y
      } //end loop on shrink_x
    } //end loop on patch_y
  } //end loop on patch_x
  

  gl_FragColor = clamp(sum, -uun_floatMax*ONE4, uun_floatMax*ONE4);

  // DEBUG ZONE:
  //gl_FragColor = texture2D(uun_inputs, uvFrom);
  //gl_FragColor = texture2D(uun_weights, uvFrom);
} 
 
